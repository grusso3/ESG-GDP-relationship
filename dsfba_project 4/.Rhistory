group_by(Income.Group, Region) %>%
top_n(1) %>%
kbl( booktabs = TRUE) %>%
kable_classic(full_width = T, html_font = "Cambria", "striped")%>%
kable_styling(bootstrap_options = c("hover", "condensed")) %>%
scroll_box(width = "100%", height = "450px")
```
We also recreated the Representative Countries Complete Tables and the Rebased table to conduct our quantitative and visual analysis.
```{r fig.show="hide"}
Rep.Countries <- Complete.Table %>%
filter( Country == "China" | Country == "United States" |Country == "Russia" | Country == "Haiti" | Country == "Australia" | Country == "Switzerland" | Country == "United Kingdom" |Country == "Saudi Arabia" | Country == "Malaysia" |Country == "Mongolia" |Country == "India" |Country == "Tunisia" |Country == "Guinea" | Country == "Ghana" | Country == "South Africa" |  Country == "Brazil" | Country == "Jordan" | Country == "El Salvador" | Country == "Barbados" | Country == "Ukraine" ) %>%
select(-c(FDIusd, FDIGDP))
Rep.Rebased <- Rebased.Table %>%
filter( Country == "China" | Country == "United States" |Country == "Russia" | Country == "Haiti" | Country == "Australia" | Country == "Switzerland" | Country == "United Kingdom" |Country == "Saudi Arabia" | Country == "Malaysia" |Country == "Mongolia" |Country == "India" |Country == "Tunisia" |Country == "Guinea" | Country == "Ghana" | Country == "South Africa" |  Country == "Brazil" | Country == "Jordan" | Country == "El Salvador" | Country == "Barbados" | Country == "Ukraine" ) %>%
select(-c(FDIusdr, FDIGDPr))
```
Noting that we have 30 years per 20 countries for 13 indicators, here is the summary analysis of our new representative countries data set:
```{r}
summary(Rep.Countries)
```
The summary analysis of our selection seems satisfying for plotting as the only missing values now are due to 1990-1995 EPI and EFI non existent data as well as 2019 non existent HDI, EduI, IncI and LEI.
GDP and other needed data for analysis are all available.
### Map of Representative Countries
A map showing the country selection with radius the size of GDP per capita and color scales based on income group:
- Red for Low Income
- Yellow for Lower Middle Income
- Light Blue for Upper Middle Income
- Dark Blue for High Income
Each country also displays its main 3 ESG indicators
```{r}
Map.data<- read.csv(here::here("data/LLData.csv"))
names(Map.data)[4]<- "Country"
names(Map.data)[2]<- "lat"
names(Map.data)[3]<- "lon"
MapTable <- Rep.Countries %>%
filter(Year == 2018) %>%
inner_join(Map.data[,2:4])
getColor <- function(MapTable) {
sapply(MapTable$Income.Group, function(Income.Group) {
if(Income.Group == "High income") {
"darkblue"
} else if(Income.Group == "Upper middle income") {
"blue"
}else if(Income.Group == "Lower middle income") {
"orange"
}else {
"red"
} })
}
leaflet(MapTable) %>% addTiles() %>%
addAwesomeMarkers(lng = MapTable$lon, lat = MapTable$lat, icon=awesomeIcons(
icon = 'ios-close',
iconColor = 'black',
markerColor = getColor(MapTable)), label=~as.character(Country),
popup = paste("Income Group:", MapTable$Income.Group, "<br>",
"Country:", MapTable$Country, "<br>",
"GDPpcap:", as.integer(MapTable$GDPpcap), "<br>",
"EFI:", as.integer(MapTable$EFI), "<br>",
"HDI:", as.integer(MapTable$HDI), "<br>",
"EPI:", as.integer(MapTable$EPI)),
labelOptions = labelOptions(noHide = T, direction = "bottom",
style = list(
"color" = "red",
"font-family" = "serif",
"font-style" = "italic",
"box-shadow" = "2px 2px rgba(0,0,0,0.25)",
"font-size" = "10px",
"border-color" = "rgba(0,0,0,0.5)"
)))%>%
addCircleMarkers(lng=MapTable$lon, lat=MapTable$lat,
radius = MapTable$GDPpcap*0.001)
```
##Representative Countries Quantitative Analysis
###Regression of Social Indexes Vs GDP
A sample of 7 countries will be selected from each Region, and with different income groups, to conduct the study.
We picked sample countries from each Region using highest GDP per cap, we got the following table:
```{r fig.show= "hide"}
Rep.Countries %>%
filter(Year == 2019) %>%
select(Income.Group:Country, GDPpcap) %>%
arrange(desc(GDPpcap)) %>%
group_by(Region) %>%
top_n(1)
```
We will substitute Australia with China, Saudi Arabia with Tunisia and Barbados with Haiti.
The resulting final table will be diverse in Income and Region categories
**Representative Sample**
```{r}
Rep.Countries %>%
filter(Year == 2019, Country == "Switzerland"|Country == "United States"|Country == "China"|Country == "Tunisia"|Country == "Haiti"|Country == "South Africa"|Country == "India") %>%
select(Income.Group:Country)
```
We will be conduction a multiple linear regression with an independant Y variable as GDP per Capita against the following Dependant X variables:
- EFI: Economic Freedom
- EPI: Environment
- LEI: Life Expectancy
- IncI: Income
- EduI: Education
The method will be a **Stepwise Regression**:
*A Regressions method used to calibrate automatically by dropping/adding Independent variables to check which X variable is most significantly affecting our Y variable**
Under this method we will judge the X vriables using the "AIC" AKAIKE Information Criterion to pick the ones with lowest AIC which are mostly significant in our study.
We will apply this regression on the whole group of our representative sample.
**Competing Methods**:
The choice of this model is that it is a commonly and widely used quantitative analysis method to study what best variables to use as independent to explain one dependent variable.
Other methods such as the Bayesian and Cp Mallows could be used but the AIC allows us to get a summary table with the resulting Dropped and kept coefficients of each variables for multiple countries chosen.
It also allows us to plot those coefficient of different variables for different countries as we will see below.
**Stepwise Regression for the sample countries**
```{r warning = FALSE}
Reg.AIC.GDP <- list(step(lm(
GDPpcap ~ EFI + EPI + LEI + IncI + EduI,
data = filter(Rep.Countries, Country == "Switzerland", Year != c("1990","1991","1992","1993","1994","2019"))))
, step(lm(
GDPpcap ~ EFI + EPI + LEI + IncI + EduI,
data = filter(Rep.Countries, Country == "United States", Year != c("1990","1991","1992","1993","1994","2019"))))
,step(lm(
GDPpcap ~ EFI + EPI + LEI + IncI + EduI,
data = filter(Rep.Countries, Country == "South Africa", Year != c("1990","1991","1992","1993","1994","2019"))))
,step(lm(
GDPpcap ~ EFI + EPI + LEI + IncI + EduI ,
data = filter(Rep.Countries, Country == "China", Year != c("1990","1991","1992","1993","1994","2019"))))
,step(lm(
GDPpcap ~ EFI + EPI + LEI + IncI + EduI,
data = filter(Rep.Countries, Country == "India", Year != c("1990","1991","1992","1993","1994","2019"))))
,step(lm(
GDPpcap ~ EFI + EPI + LEI + IncI + EduI ,
data = filter(Rep.Countries, Country == "Tunisia", Year != c("1990","1991","1992","1993","1994","2019"))))
,step(lm(
GDPpcap ~ EFI + EPI + LEI + IncI + EduI,
data = filter(Rep.Countries, Country == "Haiti", Year != c("1990","1991","1992","1993","1994","2019")))))
print(export_summs(Reg.AIC.GDP))
```
*Analysis: We can see significant relationships between GDP per Capita and EPI, LEI, IncI and to a lesser extent EduI. On the other hand, we can notice that EFI is only majorly associated to GDP in China*
A more visual approach that plots each coefficient of every indicator for every country studied in a plot
**Plot of coefficients for the sample countries**
```{r warning=FALSE}
plot_summs(Reg.AIC.GDP, scale = TRUE, plot.distributions = TRUE, rescale.distributions = TRUE, legend.title = "Country/Inc.Grp" , model.names = c( "Swit HI","USA HI","SAfr UMI","China UMI","India LMI","Tunis LMI","Haiti LI"))+
ggtitle("Coefficient Plot")
```
*Analysis: It is clearly observable that High Income countries' GDP is more or less affected by most variables while the lower the income level the more  GDP becomes linked mainly to Income, Life Expectancy, Enviromental and to a lesser extent Education variables*
### Regression of Traditional Social Indicators Vs ESG Index
To test whether the Scoring Indexes correlate with traditional Social Indicators we will use our ESG Composite and the Y variable against the following X variables:
- Unemployment Rate
- Aging Population
- Female Labour Participation
- Urbanisation
We will use the same Regression method we did before for these new variables
**Stepwise Regression for the sample countries**
```{r}
Reg.AIC.ESG <- list(step(lm(
ESGcomp ~ Urban+Unemploy+FemLab+AgingPop,
data = filter(Rep.Countries, Country == "Switzerland", Year != c("1990","1991","1992","1993","1994","2019"))))
, step(lm(
ESGcomp ~ Urban+Unemploy+FemLab+AgingPop,
data = filter(Rep.Countries, Country == "United States", Year != c("1990","1991","1992","1993","1994","2019"))))
,step(lm(
ESGcomp ~ Urban+Unemploy+FemLab+AgingPop,
data = filter(Rep.Countries, Country == "South Africa", Year != c("1990","1991","1992","1993","1994","2019"))))
,step(lm(
ESGcomp ~ Urban+Unemploy+FemLab+AgingPop,
data = filter(Rep.Countries, Country == "China", Year != c("1990","1991","1992","1993","1994","2019"))))
,step(lm(
ESGcomp ~ Urban+Unemploy+FemLab+AgingPop,
data = filter(Rep.Countries, Country == "India", Year != c("1990","1991","1992","1993","1994","2019"))))
,step(lm(
ESGcomp ~ Urban+Unemploy+FemLab+AgingPop,
data = filter(Rep.Countries, Country == "Tunisia", Year != c("1990","1991","1992","1993","1994","2019"))))
,step(lm(
ESGcomp ~ Urban+Unemploy+FemLab+AgingPop,
data = filter(Rep.Countries, Country == "Haiti", Year != c("1990","1991","1992","1993","1994","2019")))))
print(export_summs(Reg.AIC.ESG))
```
*Analysis: We can directly notice that Unemployment and Aging Population have no significant impact on our sample countries's ESG composite (with 1 or 2 exceptions). Urbanisation however seem to positively and strongly correlates with all countries except switzerland (negtive correlation). Female Labour has some opposite relationships between middle income countries*
And now the visual representation...
**Plot of coefficients for the sample countries**
```{r warning = FALSE}
plot_summs(Reg.AIC.ESG, plot.distributions = TRUE, rescale.distributions = TRUE,
legend.title = "Country-Inc.Grp" , model.names = c("Switzerland-HI","USA-HI","South Africa/UMI","China/UMI","India/LMI","Tunisia/LMI","Haiti/LI"))+
ggtitle("Coefficient Plot")
```
*Analysis: Aging population seems to relate differently to most countries but as the quants suggest, not significantly. Urbanization has a clear effect.The mixed effect of Female Labour is also clear.*
### Principal Component Analysis
We will use Principal Component Analysis to check which variables are mostly related to each other by plotting Indexes and traditional Indicators on PCA graph
The PCA is model that draws an X,Y dimensional scale that rotates in attempt to try and capture the most amount of variation explained by the variables. All plotted variables are represented by a 2 dimensional graph that tries to derive whether a group of them closely relate in terms of explaining variations of the whole dataset.
PCA is a widely used method for exploratory Data analysis.
**Competing Method**:
Another method that could be used would be factor analysis, but that method attempts to represent a group variables through the creation of a common factor that constitutes a dimension instead of treating every single variable as an independant component; hence our choice of PCA.
**PCA graphs - High Income - USA and Switzerland**
```{r  fig.show= "hide"}
PCA.swiss <- (fviz_pca_var(PCA(Rep.Countries%>% filter( Country == "Switzerland", Year != c("1990","1991","1992","1993","1994","2019")) %>%select(5:17)), col.var="contrib",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),  repel = TRUE ))
PCA.usa <- (fviz_pca_var(PCA(Rep.Countries%>% filter( Country == "United States", Year != c("1990","1991","1992","1993","1994","2019")) %>% select(5:17)), col.var="contrib",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),  repel = TRUE ))
```
```{r}
plot_grid(PCA.swiss , PCA.usa, rel_heights = c(2,2), nrow= 1,
labels = c("Switzerland", "United States"))
```
*Analysis: We can clearly rule out the effect of GDP growth from the 2 graphs. We notice the concentration of the Scoring ESG indexes on 1 Dimension*
**PCA graphs - Upper Middle Income - China and India**
```{r  fig.show= "hide"}
PCA.china <- (fviz_pca_var(PCA(Rep.Countries%>% filter( Country == "China",  between(Year,"1995","2018")) %>%select(5:17)), col.var="contrib",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),  repel = TRUE ))
PCA.india <- (fviz_pca_var(PCA(Rep.Countries%>% filter( Country == "India",
between(Year,"1995","2018")) %>% select(5:17)), col.var="contrib",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),  repel = TRUE ))
```
```{r}
plot_grid(PCA.china , PCA.india, rel_heights = c(2,2), nrow= 1,
labels = c("China", "India"))
source(here::here("scripts/setup.R"))
sheets <- readxl::excel_sheets(here::here("data/Dataset.raw.xlsx"))
lst <- lapply(sheets, function(sheet)
readxl::read_excel(here::here("data/Dataset.raw.xlsx"), sheet = sheet))
lst <- lapply(sheets, function(sheet)
readxl::read_excel(here::here("data/Dataset.raw.xlsx"), sheet = sheet))
names(lst) <- sheets
list2env(lst, envir = .GlobalEnv)
rm(`Country Table`)
cols <- c("1990", "1991","1992","1993","1994","1995","1996","1997","1998","1999", "2000","2001","2002","2003","2004","2005","2006","2007","2008","2009","2010",
"2011","2012","2013","2014","2015","2016","2017","2018","2019")
FemLab[,cols] <- sapply(FemLab[,cols],as.numeric)
AgingPop[,cols] <- sapply(AgingPop[,cols],as.numeric)
Urban[,cols] <- sapply(Urban[,cols],as.numeric)
Unemploy[,cols] <- sapply(Unemploy[,cols],as.numeric)
FDIGDP[,cols] <- sapply(FDIGDP[,cols],as.numeric)
FDIusd[,cols] <- sapply(FDIusd[,cols],as.numeric)
GDPg[,cols] <- sapply(GDPg[,cols],as.numeric)
GDPpcap[,cols] <- sapply(GDPpcap[,cols],as.numeric)
EFI[,cols] <- sapply(EFI[,cols],as.numeric)
LEI[,cols] <- sapply(LEI[,cols],as.numeric)
HDI[,cols] <- sapply(HDI[,cols],as.numeric)
EduI[,cols] <- sapply(EduI[,cols],as.numeric)
IncI[,cols] <- sapply(IncI[,cols],as.numeric)
EPI[,cols] <- sapply(EPI[,cols],as.numeric)
AgingPop <- AgingPop %>%
pivot_longer(c('1990':'2019'), names_to= "Year", values_to = "AgingPop")
FemLab <-  FemLab %>%
pivot_longer(c('1990':'2019'), names_to= "Year", values_to = "FemLab")
Urban <-Urban %>%
pivot_longer(c('1990':'2019'), names_to= "Year", values_to = "Urban")
Unemploy<-Unemploy %>%
pivot_longer(c('1990':'2019'), names_to= "Year", values_to = "Unemploy")
FDIusd<- FDIusd %>%
pivot_longer(c('1990':'2019'), names_to= "Year", values_to = "FDIusd")
FDIGDP <- FDIGDP %>%
pivot_longer(c('1990':'2019'), names_to= "Year", values_to = "FDIGDP")
GDPg<- GDPg %>%
pivot_longer(c('1990':'2019'), names_to= "Year", values_to = "GDPg")
GDPpcap <- GDPpcap %>%
pivot_longer(c('1990':'2019'), names_to= "Year", values_to = "GDPpcap")
EFI <- EFI %>%
pivot_longer(c('1990':'2019'), names_to= "Year", values_to = "EFI")
EPI <- EPI %>%
pivot_longer(c('1990':'2019'), names_to= "Year", values_to = "EPI")
EduI <- EduI %>%
pivot_longer(c('1990':'2019'), names_to= "Year", values_to = "EduI")
IncI <- IncI %>%
pivot_longer(c('1990':'2019'), names_to= "Year", values_to = "IncI")
LEI <- LEI %>%
pivot_longer(c('1990':'2019'), names_to= "Year", values_to = "LEI")
HDI <- HDI %>%
pivot_longer(c('1990':'2019'), names_to= "Year", values_to = "HDI")
Full.Table <- Urban %>%
inner_join(AgingPop[,3:5], by = c("Country","Year")) %>%
inner_join(FemLab[,3:5], by = c("Country","Year")) %>%
inner_join(Unemploy[,3:5], by = c("Country","Year")) %>%
inner_join(GDPg[,3:5], by = c("Country","Year")) %>%
inner_join(GDPpcap[,3:5], by = c("Country","Year")) %>%
inner_join(FDIGDP[,3:5], by = c("Country","Year")) %>%
inner_join(FDIusd[,3:5], by = c("Country","Year")) %>%
inner_join(HDI[,3:5], by = c("Country","Year")) %>%
inner_join(LEI[,3:5], by = c("Country","Year")) %>%
inner_join(IncI[,3:5], by = c("Country","Year")) %>%
inner_join(EduI[,3:5], by = c("Country","Year")) %>%
inner_join(EPI[,3:5], by = c("Country","Year")) %>%
inner_join(EFI[,3:5], by = c("Country","Year"))
colnames(Full.Table)[1] <- ("Income.Group")
write.csv(Full.Table, here::here("data/Full.Table"), row.names = FALSE)
source(here::here("scripts/setup.R"))
Full.Table <- read.csv(here::here("data/Full.Table"))
Complete.Table <- Full.Table %>%
mutate(ESGcomp = 0.3*EPI + 0.3*EFI + 0.4/3*LEI + 0.4/3*IncI + 0.4/3*EduI)
Rebased.Table <- read_excel(here::here("data/Complete.Scaled.xlsx"))
cols2<- c("Urbanr","AgingPopr","FemLabr","Unemployr","GDPgr","GDPpcapr",
"FDIGDPr","FDIusdr","HDIr","LEIr","IncIr","EduIr","EPIr","EFIr","ESGcompr")
Rebased.Table[,cols2] <- sapply(Rebased.Table[,cols2],as.numeric)
Rebased.Pivot <- Rebased.Table %>%
pivot_longer(c("Urbanr":"ESGcompr"),names_to = "Indicator", values_to= "Value")
G9.Table <- Rebased.Pivot %>%
filter(Country == "United States" | Country == "United Kingdom" | Country == "Canada" |
Country == "Russia" | Country == "China" |Country == "Italy" | Country == "Japan" |
Country == "France" | Country == "Germany")
binner <- function(data) {
shinyApp(
ui<- fluidPage(
titlePanel("Correlation Plot for G9 Countries"),
selectInput(inputId = "Country",
label="Choose a country",
choices = c("United States", "United Kingdom","Italy", "Canada", "Japan", "France", "Germany", "China", "Russia")),
mainPanel(
h1("Correlation between variables"),
textOutput("Selected_Count"),
plotOutput(outputId ="Corrplot")
)),
server <- function(input,output)
{
data <- reactive({
Complete.Table %>% filter(Country==input$Country) %>% select("Urban":"ESGcomp")%>%na.omit()})
output$Selected_Count <- renderUI({
paste("You have selected", input$Country)
})
output$Corrplot <- renderPlot({
ggcorrplot(cor(data()), method = "circle",colors = c("red", "white", "blue"))
})
}
)}
binner(data)
Data.98.08.18 <- Complete.Table %>%
filter(Year == 2018 | Year == 2008 |Year == 1998) %>%
na.omit()
IncGrp.Avg <- Rebased.Table %>%
group_by(Income.Group, Year) %>%
summarize_all(funs(mean(.,na.rm =TRUE))) %>%
select(-c(Region,Country)) %>%
pivot_longer(c('Urbanr':'ESGcompr'), names_to= "Indicator", values_to = "Value")
Region.Avg <- Rebased.Table %>%
group_by(Region, Year) %>%
summarize_all(funs(mean(.,na.rm =TRUE))) %>%
select(-c(Country,Income.Group))%>%
pivot_longer(c('Urbanr':'ESGcompr'), names_to= "Indicator", values_to = "Value")
write.csv(Complete.Table, here::here("data/Complete.Table"), row.names = FALSE)
write.csv(Rebased.Table, here::here("data/Rebased.Table"), row.names = FALSE)
write.csv(G9.Table, here::here("data/G9.Table"), row.names = FALSE)
write.csv(Data.98.08.18, here::here("data/Data.98.08.18"), row.names = FALSE)
write.csv(Rebased.Pivot, here::here("data/Rebased.Pivot"), row.names = FALSE)
Complete.Table <- read.csv(here::here("data/Complete.Table"))
Rebased.Table <- read.csv(here::here("data/Rebased.Table"))
G9.Table <- read.csv(here::here("data/G9.Table"))
Data.98.08.18 <- read.csv(here::here("data/Data.98.08.18"))
Rebased.Pivot <- read.csv(here::here("data/Rebased.Pivot"))
Rep.Countries <- Complete.Table %>%
filter( Country == "China" | Country == "United States" |Country == "Russia" | Country == "Haiti" | Country == "Australia" | Country == "Switzerland" | Country == "United Kingdom" |Country == "Saudi Arabia" | Country == "Malaysia" |Country == "Mongolia" |Country == "India" |Country == "Tunisia" |Country == "Guinea" | Country == "Ghana" | Country == "South Africa" |  Country == "Brazil" | Country == "Jordan" | Country == "El Salvador" | Country == "Barbados" | Country == "Ukraine" ) %>%
select(-c(FDIusd, FDIGDP))
Rep.Rebased <- Rebased.Table %>%
filter( Country == "China" | Country == "United States" |Country == "Russia" | Country == "Haiti" | Country == "Australia" | Country == "Switzerland" | Country == "United Kingdom" |Country == "Saudi Arabia" | Country == "Malaysia" |Country == "Mongolia" |Country == "India" |Country == "Tunisia" |Country == "Guinea" | Country == "Ghana" | Country == "South Africa" |  Country == "Brazil" | Country == "Jordan" | Country == "El Salvador" | Country == "Barbados" | Country == "Ukraine" ) %>%
select(-c(FDIusdr, FDIGDPr))
Map.data<- read.csv(here::here("data/LLData.csv"))
names(Map.data)[4]<- "Country"
names(Map.data)[2]<- "lat"
names(Map.data)[3]<- "lon"
MapTable <- Rep.Countries %>%
filter(Year == 2018) %>%
inner_join(Map.data[,2:4])
getColor <- function(MapTable) {
sapply(MapTable$Income.Group, function(Income.Group) {
if(Income.Group == "High income") {
"darkblue"
} else if(Income.Group == "Upper middle income") {
"blue"
}else if(Income.Group == "Lower middle income") {
"orange"
}else {
"red"
} })
}
leaflet(MapTable) %>% addTiles() %>%
addAwesomeMarkers(lng = MapTable$lon, lat = MapTable$lat, icon=awesomeIcons(
icon = 'ios-close',
iconColor = 'black',
markerColor = getColor(MapTable)), label=~as.character(Country),
popup = paste("Income Group:", MapTable$Income.Group, "<br>",
"Country:", MapTable$Country, "<br>",
"GDPpcap:", as.integer(MapTable$GDPpcap), "<br>",
"EFI:", as.integer(MapTable$EFI), "<br>",
"HDI:", as.integer(MapTable$HDI), "<br>",
"EPI:", as.integer(MapTable$EPI)),
labelOptions = labelOptions(noHide = T, direction = "bottom",
style = list(
"color" = "red",
"font-family" = "serif",
"font-style" = "italic",
"box-shadow" = "2px 2px rgba(0,0,0,0.25)",
"font-size" = "10px",
"border-color" = "rgba(0,0,0,0.5)"
)))%>%
addCircleMarkers(lng=MapTable$lon, lat=MapTable$lat,
radius = MapTable$GDPpcap*0.001)
Reg.AIC.GDP <- list(step(lm(
GDPpcap ~ EFI + EPI + LEI + IncI + EduI,
data = filter(Rep.Countries, Country == "Switzerland", Year != c("1990","1991","1992","1993","1994","2019"))))
, step(lm(
GDPpcap ~ EFI + EPI + LEI + IncI + EduI,
data = filter(Rep.Countries, Country == "United States", Year != c("1990","1991","1992","1993","1994","2019"))))
,step(lm(
GDPpcap ~ EFI + EPI + LEI + IncI + EduI,
data = filter(Rep.Countries, Country == "South Africa", Year != c("1990","1991","1992","1993","1994","2019"))))
,step(lm(
GDPpcap ~ EFI + EPI + LEI + IncI + EduI ,
data = filter(Rep.Countries, Country == "China", Year != c("1990","1991","1992","1993","1994","2019"))))
,step(lm(
GDPpcap ~ EFI + EPI + LEI + IncI + EduI,
data = filter(Rep.Countries, Country == "India", Year != c("1990","1991","1992","1993","1994","2019"))))
,step(lm(
GDPpcap ~ EFI + EPI + LEI + IncI + EduI ,
data = filter(Rep.Countries, Country == "Tunisia", Year != c("1990","1991","1992","1993","1994","2019"))))
,step(lm(
GDPpcap ~ EFI + EPI + LEI + IncI + EduI,
data = filter(Rep.Countries, Country == "Haiti", Year != c("1990","1991","1992","1993","1994","2019")))))
Reg.AIC.ESG <- list(step(lm(
ESGcomp ~ Urban+Unemploy+FemLab+AgingPop,
data = filter(Rep.Countries, Country == "Switzerland", Year != c("1990","1991","1992","1993","1994","2019"))))
, step(lm(
ESGcomp ~ Urban+Unemploy+FemLab+AgingPop,
data = filter(Rep.Countries, Country == "United States", Year != c("1990","1991","1992","1993","1994","2019"))))
,step(lm(
ESGcomp ~ Urban+Unemploy+FemLab+AgingPop,
data = filter(Rep.Countries, Country == "South Africa", Year != c("1990","1991","1992","1993","1994","2019"))))
,step(lm(
ESGcomp ~ Urban+Unemploy+FemLab+AgingPop,
data = filter(Rep.Countries, Country == "China", Year != c("1990","1991","1992","1993","1994","2019"))))
,step(lm(
ESGcomp ~ Urban+Unemploy+FemLab+AgingPop,
data = filter(Rep.Countries, Country == "India", Year != c("1990","1991","1992","1993","1994","2019"))))
,step(lm(
ESGcomp ~ Urban+Unemploy+FemLab+AgingPop,
data = filter(Rep.Countries, Country == "Tunisia", Year != c("1990","1991","1992","1993","1994","2019"))))
,step(lm(
ESGcomp ~ Urban+Unemploy+FemLab+AgingPop,
data = filter(Rep.Countries, Country == "Haiti", Year != c("1990","1991","1992","1993","1994","2019")))))
PCA.swiss <- (fviz_pca_var(PCA(Rep.Countries%>% filter( Country == "Switzerland", Year != c("1990","1991","1992","1993","1994","2019")) %>%select(5:17)), col.var="contrib",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),  repel = TRUE ))
PCA.swiss <- (fviz_pca_var(PCA(Rep.Countries%>% filter( Country == "Switzerland", Year != c("1990","1991","1992","1993","1994","2019")) %>%select(5:17)), col.var="contrib",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),  repel = TRUE ))
PCA.usa <- (fviz_pca_var(PCA(Rep.Countries%>% filter( Country == "United States", Year != c("1990","1991","1992","1993","1994","2019")) %>% select(5:17)), col.var="contrib",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),  repel = TRUE ))
PCA.china <- (fviz_pca_var(PCA(Rep.Countries%>% filter( Country == "China",  between(Year,"1995","2018")) %>%select(5:17)), col.var="contrib",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),  repel = TRUE ))
PCA.china <- (fviz_pca_var(PCA(Rep.Countries%>% filter( Country == "China",  between(Year,"1995","2018")) %>%select(5:17)), col.var="contrib",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),  repel = TRUE ))
PCA.india <- (fviz_pca_var(PCA(Rep.Countries%>% filter( Country == "India",
between(Year,"1995","2018")) %>% select(5:17)), col.var="contrib",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),  repel = TRUE ))
PCA.haiti <- (fviz_pca_var(PCA(Rep.Countries %>% filter( Country == "Haiti",  between(Year,"1995","2018")) %>% select(5:17)), col.var="contrib",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),  repel = TRUE ))
PCA.haiti <- (fviz_pca_var(PCA(Rep.Countries %>% filter( Country == "Haiti",  between(Year,"1995","2018")) %>% select(5:17)), col.var="contrib",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),  repel = TRUE ))
#layout of page
binner1 <- function(data) {
shinyApp(
ui<- fluidPage(
titlePanel("Interactive Plot for Representative Countries"),
selectInput(inputId = "Country",
label="Choose a country",
choices = c("United States", "Saudi Arabia","Australia", "United Kingdom", "Switzerland", "Barbados","Haiti", "India","China","Guinea","Ghana","Mongolia","Tunisia","Ukraine","Russia","Brazil","Jordan","South Africa","Malaysia","El Salvador")),
mainPanel(
h1("ESG composite vs GDP per capita"),
textOutput("Selected_Count"),
plotlyOutput(outputId ="PlotlyESG")
)),
server <- function(input,output)
{
data1 <- reactive({
Rep.Countries %>% filter(Country==input$Country)})
output$Selected_Count <- renderUI({
paste("You have selected", input$Country)
})
output$PlotlyESG <- renderPlotly({
plot_ly(data1(),x = ~Year, y = ~GDPpcap ,type = "scatter", mode = "lines", width = 600
,name = "GDP", height = 300) %>%
add_trace(x = ~Year, y = ~ESGcomp, yaxis = "y2", name = "ESG") %>%
layout(
yaxis = list(showline = FALSE, side = "right" ,title = "", color = "blue") ,
yaxis2 = list( showline = FALSE,overlaying = "y" ,title = "", anchor = "free" , color = "orange" )
,xaxis = list( showline = FALSE, zeroline = FALSE, dtick = 0, title = "Year")
,showlegend = TRUE ,margin = list(pad = 30, b = 30, l = 150, r = 30)
,legend = list(orientation = "bottomright"))
})
}
)}
binner1(data1)
View(Rep.Countries)
fig <- plot_ly(Rep.Countries, x = ~Year)
fig <- fig %>% add_lines(y = ~GDPpcap, name = "A")
fig <- fig %>% add_lines(y = ~ESGcomp, name = "B", visible = F)
fig <- fig %>% layout(
title = "Drop down menus - Styling",
xaxis = list(domain = c(0.1, 1)),
yaxis = list(title = "y"),
updatemenus = list(
list(
y = 0.8,
buttons = list(
list(method = "restyle",
args = list("line.color", "blue"),
label = "Blue"),
list(method = "restyle",
args = list("line.color", "red"),
label = "Red"))),
list(
y = 0.7,
buttons = list(
list(method = "restyle",
args = list("visible", list(TRUE, FALSE)),
label = "Sin"),
list(method = "restyle",
args = list("visible", list(FALSE, TRUE)),
label = "Cos")))
)
)
fig
rm(fig)
source(here::here("scripts/setup.R"))
